plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.flywaydb.flyway' version '6.5.1'
  id 'org.springframework.boot' version '2.3.1.RELEASE' // review tomcat managed dependency
  id 'org.owasp.dependencycheck' version '5.3.2.1'
  id 'com.github.ben-manes.versions' version '0.29.0'
  id 'org.sonarqube' version '3.0'
  id "info.solidsoft.pitest" version '1.5.1'
  id 'au.com.dius.pact' version '4.1.6'
}

group = 'uk.gov.hmcts.reform'
version = '0.1.0' // all the time it was 0.0.1. 0.1.0 marks migration to java 11

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

test {
  failFast = true
}

task contract(type: Test, description: 'Runs the contract tests.', group: 'Verification') {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test){
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  // set your environment variables here
   environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory.set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.5.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
  ruleSets = []
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/bulkscanprocessor/config/**'
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

pitest {
  group = "Verification"
  pitestVersion.set('1.5.1')
  junit5PluginVersion.set('0.12')
  testSourceSets = [sourceSets.test]
  mainSourceSets = [sourceSets.main]
  targetClasses = ['uk.gov.hmcts.reform.bulkscanprocessor.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.bulkscanprocessor.config.*'
  ]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 50
  timeoutConstInMillis = 30000
  mutators.set([
    'CONDITIONALS_BOUNDARY',
    'INCREMENTS',
    'INVERT_NEGS',
    'MATH',
    'NEGATE_CONDITIONALS',
    'VOID_METHOD_CALLS',
    'EMPTY_RETURNS',
    'FALSE_RETURNS',
    'NULL_RETURNS',
    'PRIMITIVE_RETURNS',
    'TRUE_RETURNS',
    'REMOVE_CONDITIONALS'
  ])
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Bulk Scan Processor"
    property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.destination.path
    property "sonar.exclusions", "**/model/out/*,**/config/**"
  }
}

pact {
  publish {
    pactBrokerUrl = 'https://pact-broker.platform.hmcts.net'
    version = '0.0.1'
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit: '5.6.2',
  junitPlatform: '1.6.2',
  mockitoJupiter: '3.3.3',
  springfoxSwagger: '2.9.2',
  reformLogging: '5.1.5'
]

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.66'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '28.2-jre') {
      entry 'guava'
    }
    // align with jupiter
    dependencySet(group: 'org.mockito', version: versions.mockitoJupiter) {
      entry 'mockito-core'
    }
    // force junit5 deps to use groovy v3 which fixes reflective call errors for java 11
    // rest assured 4.2 -> 4.3 jumps to groovy v3. junit v5.6 still on v2.5
    dependencySet(group: 'org.codehaus.groovy', version: '3.0.5') {
      entry 'groovy'
      entry 'groovy-json'
      entry 'groovy-xml'
    }
    //CVE-2019-14900
    dependencySet(group: 'org.hibernate', version: '5.4.19.Final') {
      entry 'hibernate-core'
    }
    // CVE-2020-13934, CVE-2020-13935 until 9.0.36 (inclusive)
    // review together with spring boot update
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.37') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-websocket'
    }
  }
}

repositories {
  mavenCentral()
  jcenter()
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]
ext["rest-assured.version"] = '4.3.0'

dependencies {
  // exclude spring-cloud-context as it is already included in spring-cloud-starter-netflix-hystrix
  def withoutSpringCloudContext = {
    exclude group: 'org.springframework.cloud', module: 'spring-cloud-context'
  }

  def withoutJavaxMailApi = {
    exclude group: 'javax.mail', module: 'mailapi'
  }

  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-spring', version: '4.12.0'
  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-provider-jdbc', version: '4.12.0'

  implementation group: 'com.microsoft.azure', name: 'azure-storage', version: '8.6.5'
  implementation group: 'com.microsoft.azure', name: 'azure-servicebus', version: '3.4.0', {
    exclude group: 'javax.mail', module: 'mail'
    exclude group: 'net.minidev', module: 'json-smart'
  }

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.1.0', withoutSpringCloudContext

  implementation group: 'com.github.java-json-tools', name: 'json-schema-validator', version: '2.2.13', withoutJavaxMailApi

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '6.5.2'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'
  // review following dependency after integrating db structure
  implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.9.12'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.3.RELEASE'

  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.0'

  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'
  implementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'

  implementation group: 'commons-io', name: 'commons-io', version: '2.7'
  // only used in uk.gov.hmcts.reform.bulkscanprocessor.validation.OcrValidator
  // single import: io.vavr.control.Try
  implementation group: 'io.vavr', name: 'vavr', version: '0.10.3'

  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'com.jayway.awaitility', name: 'awaitility', version: '1.7.0'
  testImplementation group: 'com.icegreen', name: 'greenmail', version: '1.5.14', {
    exclude group: 'junit', module: 'junit'
  }
  testImplementation group: 'org.apache.commons', name: 'commons-email', version: '1.5'
  testImplementation group: 'io.github.netmikey.logunit', name: 'logunit-core', version: '1.1.0'
  testRuntimeOnly group: 'io.github.netmikey.logunit', name: 'logunit-logback', version: '1.1.0'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.2.3.RELEASE', {
    exclude group: 'com.github.tomakehurst', module: 'wiremock-jre8-standalone'
  }
  integrationTestImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.26.3'
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.14.3', {
    exclude group: 'junit', module: 'junit'
  }
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.14.3'
  integrationTestImplementation group: 'com.revinate', name: 'assertj-json', version: '1.2.0'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.smokeTest.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured'
  functionalTestImplementation group: 'com.typesafe', name: 'config', version: '1.4.0'

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
  contractTestImplementation group: 'io.rest-assured', name: 'rest-assured'
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-junit5', version: '4.0.10'
}

mainClassName = 'uk.gov.hmcts.reform.bulkscanprocessor.Application'

bootJar {
  getArchiveFileName().set(provider {
    'bulk-scan-processor.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

import org.flywaydb.gradle.task.FlywayMigrateTask

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}
