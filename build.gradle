buildscript {
  ext {
    flywayVersion = '11.10.4'
    postgresqlVersion = '42.7.7'
  }
  dependencies {
    classpath("org.postgresql:postgresql:$postgresqlVersion")
    classpath("org.flywaydb:flyway-database-postgresql:$flywayVersion")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.flywaydb.flyway' version "$flywayVersion"
  id 'org.springframework.boot' version '3.5.4'
  id 'org.owasp.dependencycheck' version '12.1.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
}

group = 'uk.gov.hmcts.reform'
version = '0.1.0'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += sourceSets.test.output + configurations.testCompileClasspath
      runtimeClasspath += sourceSets.test.output + configurations.testRuntimeClasspath
    }
  }

}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
  failFast = true
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.3'
  configDirectory.set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.16.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  ruleSetFiles = files("config/pmd/ruleset.xml")
  ruleSets = []
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required.set(true)
    csv.required.set(false)
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/bulkscanprocessor/config/**'
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Bulk Scan Processor"
    property "sonar.projectKey", "Verification:bulk-scan-processor"
    property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.outputLocation.get().asFile.absolutePath
    property "sonar.exclusions", "**/model/out/*,**/config/**,**/LeaseAcquirer.java,**/services/jms/JmsFileContentProcessor.java,**/tasks/jms/JmsBlobProcessorTask.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    assemblyEnabled = false
  }
}

def versions = [
  reformLogging: '6.1.9',
  flyway: "$flywayVersion",
  postgresql: "$postgresqlVersion"
]


repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

dependencies {
  runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flyway
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway
  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-spring', version: '6.9.2'
  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-provider-jdbc', version: '6.9.2'
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.30.1'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.12'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'
  implementation group: 'com.github.java-json-tools', name: 'json-schema-validator', version: '2.2.14'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.5'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.1'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'
  implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.59.2'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.18.0'
  implementation group: 'commons-io', name: 'commons-io', version: '2.20.0'
  implementation group: 'io.vavr', name: 'vavr', version: '0.10.7'
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.14.0'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.2'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.10.1'
  implementation group: 'org.checkerframework', name: 'checker-qual', version: '3.49.5'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
  implementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'
  testImplementation group: 'com.jayway.awaitility', name: 'awaitility', version: '1.7.0'
  testImplementation group: 'io.github.netmikey.logunit', name: 'logunit-core', version: '2.0.0'
  testImplementation group: 'com.icegreen', name: 'greenmail', version: '2.1.4'
  testRuntimeOnly group: 'io.github.netmikey.logunit', name: 'logunit-logback', version: '2.0.0'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '4.3.0'
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.21.3'
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.21.3'

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.5'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.smokeTest.runtimeClasspath
  functionalTestImplementation group: 'com.typesafe', name: 'config', version: '1.4.4'
}

mainClassName = 'uk.gov.hmcts.reform.bulkscanprocessor.Application'

bootJar {
  getArchiveFileName().set(provider {
    'bulk-scan-processor.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

import org.flywaydb.gradle.task.FlywayMigrateTask

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}
