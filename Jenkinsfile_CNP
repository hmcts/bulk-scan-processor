#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "bulk-scan"
def component = "processor"

def channel = '#bsp-build-notices'

def combinedSecrets = [
  'bulk-scan-${env}': [
    secret('storage-account-staging-primary-key', 'TEST_STORAGE_ACCOUNT_KEY'),
    secret('storage-account-staging-name', 'TEST_STORAGE_ACCOUNT_NAME'),
    secret('processed-envelopes-staging-queue-send-shared-access-key', 'PROCESSED_ENVELOPES_QUEUE_WRITE_ACCESS_KEY')
  ],
  's2s-${env}': [
    // to be removed later
    secret('microservicekey-bulk-scan-processor-tests', 'TEST_S2S_SECRET'),
    secret('microservicekey-bulk-scan-processor-tests', 'S2S_SECRET')
  ]
]

def commonSecrets = [
  's2s-${env}': [
    // to be removed later
    secret('microservicekey-bulk-scan-processor-tests', 'TEST_S2S_SECRET'),
    secret('microservicekey-bulk-scan-processor-tests', 'S2S_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  // Vars needed for smoke / functional testing
  env.TEST_S2S_NAME = 'bulk_scan_processor_tests'
  env.TEST_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
  env.TEST_SCAN_DELAY = '4000'
  env.TEST_STORAGE_CONTAINER_NAME = 'bulkscan'
  env.TEST_STORAGE_ACCOUNT_URL = 'https://bulkscanaatstaging.blob.core.windows.net'
  env.FLUX_FUNC_TEST = false
  env.PROCESSED_ENVELOPES_QUEUE_NAME = 'processed-envelopes-staging'
  env.PROCESSED_ENVELOPES_QUEUE_NAMESPACE = 'bulk-scan-servicebus-aat'
  env.PROCESSED_ENVELOPES_QUEUE_WRITE_ACCESS_KEY_NAME = 'SendSharedAccessKey'
  env.JMS_ENABLED = false
  env.SPRING_PROFILES_ACTIVE = 'default'

  before('smoketest:preview') {
    withAksClient('nonprod', product) {
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT, env.LAST_COMMIT_TIMESTAMP)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def storageSecret = "storage-secret-${aksServiceName}-blobstorage"
      def serviceBusSecret = "servicebus-secret-namespace-${aksServiceName}-servicebus"
      def storageSecretName = "storage-account-${aksServiceName}-blobstorage"
      def namespace = new TeamConfig(this).getNameSpace(product)
      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()


      // Get storage account details from kubernetes
      env.TEST_STORAGE_ACCOUNT_KEY = kubectl.getSecret(storageSecret, namespace, "{.data.accessKey}")
      env.TEST_STORAGE_ACCOUNT_URL = kubectl.getSecret(storageSecret, namespace, "{.data.blobEndpoint}")
      env.TEST_STORAGE_ACCOUNT_NAME = kubectl.getSecret(storageSecretName, namespace, "{.data.storage_account_name}")

      // log the values
      echo "storage account url : ${env.TEST_STORAGE_ACCOUNT_URL}"
      echo "storage account name : ${env.TEST_STORAGE_ACCOUNT_NAME}"
      echo "storage account key : ${env.TEST_STORAGE_ACCOUNT_KEY}"


      // Get envelopes queue connection string
      env.PROCESSED_ENVELOPES_QUEUE_NAME = 'processed-envelopes'
      env.PROCESSED_ENVELOPES_QUEUE_NAMESPACE = kubectl.getSecret(serviceBusSecret, namespace, "{.data.namespaceName}")
      env.PROCESSED_ENVELOPES_QUEUE_WRITE_ACCESS_KEY = kubectl.getSecret(serviceBusSecret, namespace, "{.data.primaryKey}")
      env.PROCESSED_ENVELOPES_QUEUE_WRITE_ACCESS_KEY_NAME = 'RootManageSharedAccessKey'

    }
  }
  def branchesToSync = ['demo', 'perftest']
  syncBranchesWithMaster(branchesToSync)

  afterSuccess('test') {
    builder.gradle('integration')
  }
  enableDbMigration('bulk-scan')
  enableSlackNotifications(channel)
  enableAksStagingDeployment()
  disableLegacyDeployment()
  enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])

  onPR() {
    loadVaultSecrets(commonSecrets)
  }

  onNonPR() {
    loadVaultSecrets(combinedSecrets)
  }
}
