#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

import groovy.json.JsonSlurperClassic

def type = "java"
def product = "bulk-scan"
def component = "processor"

def channel = '#rpe-build-notices'

List<LinkedHashMap<String, Object>> apiTestSecrets = [
  // Base64-encoded PKCS 12 key store, containing client's private key and certificate known to the API
  secret('test-valid-key-store', 'TEST_VALID_KEY_STORE'),
  secret('test-valid-key-store-password', 'TEST_VALID_KEY_STORE_PASSWORD'),

  // Base64-encoded PKCS 12 key store containing private key and certificate known to the API, but expired
  secret('test-expired-key-store', 'TEST_EXPIRED_KEY_STORE'),
  secret('test-expired-key-store-password', 'TEST_EXPIRED_KEY_STORE_PASSWORD'),

  // Base64-encoded PKCS12 key store containing private key and certificate known to the API, but not yet valid
  secret('test-not-yet-valid-key-store', 'TEST_NOT_YET_VALID_KEY_STORE'),
  secret('test-not-yet-valid-key-store-password', 'TEST_NOT_YET_VALID_KEY_STORE_PASSWORD'),

  secret('test-subscription-key', 'TEST_SUBSCRIPTION_KEY')
]

List<LinkedHashMap<String, Object>> commonSecrets = [
  //secret('test-storage-account-key', 'TEST_STORAGE_ACCOUNT_KEY'),
  secret('test-s2s-secret', 'TEST_S2S_SECRET'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars needed for AKS testing
env.TEST_S2S_NAME = 'bulk_scan_processor_tests'
env.TEST_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
//env.TEST_STORAGE_ACCOUNT_NAME = 'bulkscanoldaat'
//env.test_storage_container_name = 'test'
env.TEST_SCAN_DELAY = '4000'

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  //after('checkout') {
  //  echo sh(returnStdout: true, script: 'env')
  //}
  after('deploy:aks') {
    jsonSlurper = new JsonSlurperClassic()
    storageAccounts = sh(returnStdOut: true, script: "az storage account list --resource-group ${env.BRANCH_NAME}")
    env.TEST_STORAGE_ACCOUNT_NAME = jsonSlurper.parseText(storageAccounts).get(0).name
    storageKeys = sh(returnStdOut: true, script: "az storage account keys list -g ${env.BRANCH_NAME} --account-name ${env.TEST_STORAGE_ACCOUNT_NAME}")
    env.TEST_STORAGE_ACCOUNT_KEY = jsonSlurper.parseText(storageAccounts).get(0).value
  }

  after('test') {
    builder.gradle('integration')
  }
  enableDbMigration()
  enableSlackNotifications(channel)
  enableApiGatewayTest()
  enableDockerBuild()
  enableDeployToAKS()

  onPR() {
    loadVaultSecrets(commonSecrets)
  }

  onNonPR() {
    loadVaultSecrets(commonSecrets + apiTestSecrets)
  }

  setVaultName('bulk-scan')
}
