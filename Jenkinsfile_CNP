#!groovy

@Library("Infrastructure@with-aks-client")
import uk.gov.hmcts.contino.GradleBuilder

import uk.gov.hmcts.contino.Kubectl

//import uk.gov.hmcts.contino.DockerImage
//import groovy.json.JsonSlurperClassic

def type = "java"
def product = "bulk-scan"
def component = "processor"

def channel = '#rpe-build-notices'

List<LinkedHashMap<String, Object>> apiTestSecrets = [
  // Base64-encoded PKCS 12 key store, containing client's private key and certificate known to the API
  secret('test-valid-key-store', 'TEST_VALID_KEY_STORE'),
  secret('test-valid-key-store-password', 'TEST_VALID_KEY_STORE_PASSWORD'),

  // Base64-encoded PKCS 12 key store containing private key and certificate known to the API, but expired
  secret('test-expired-key-store', 'TEST_EXPIRED_KEY_STORE'),
  secret('test-expired-key-store-password', 'TEST_EXPIRED_KEY_STORE_PASSWORD'),

  // Base64-encoded PKCS12 key store containing private key and certificate known to the API, but not yet valid
  secret('test-not-yet-valid-key-store', 'TEST_NOT_YET_VALID_KEY_STORE'),
  secret('test-not-yet-valid-key-store-password', 'TEST_NOT_YET_VALID_KEY_STORE_PASSWORD'),

  secret('test-subscription-key', 'TEST_SUBSCRIPTION_KEY')
]

List<LinkedHashMap<String, Object>> commonSecrets = [
  //secret('test-storage-account-key', 'TEST_STORAGE_ACCOUNT_KEY'),
  secret('test-s2s-secret', 'TEST_S2S_SECRET'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars needed for AKS testing
env.TEST_S2S_NAME = 'bulk_scan_processor_tests'
env.TEST_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
env.TEST_SCAN_DELAY = '4000'
env.RESOURCE_GROUP = 'bulk-scan-aks-rg'

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  //after('checkout') {
  //  echo sh(returnStdout: true, script: 'env')
  //}
  after('smoketest:aks') {
    withAksClient('nonprod') {
      echo sh(returnStdout: true, script: 'env')

      def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-${env.SUBSCRIPTION_NAME} az $cmd", returnStdout: true).trim() }

      /*
      jsonSlurper = new JsonSlurperClassic()
      //storageAccounts = sh(returnStdOut: true, script: "az storage account list --resource-group ${env.BRANCH_NAME}")
      storageAccounts = az "storage account list --resource-group ${env.RESOURCE_GROUP}"
      env.TEST_STORAGE_ACCOUNT_NAME = jsonSlurper.parseText(storageAccounts).get(0).name

      //storageKeys = sh(returnStdOut: true, script: "az storage account keys list -g ${env.BRANCH_NAME} --account-name ${env.TEST_STORAGE_ACCOUNT_NAME}")
      storageKeys = az "storage account keys list -g ${env.RESOURCE_GROUP} --account-name ${env.TEST_STORAGE_ACCOUNT_NAME}"
      env.TEST_STORAGE_ACCOUNT_KEY = jsonSlurper.parseText(storageAccounts).get(0).value
      */

      //def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = "${product}-${component}-${env.BRANCH_NAME}".toLowerCase()
      def storageSecret = "${aksServiceName}-storage-secret"
      def serviceBusSecret = "${aksServiceName}-servicebus-secret"
      def queueName = "envelopes"

      def namespace = aksServiceName
      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      env.TEST_STORAGE_ACCOUNT_NAME = kubectl.getSecret(storageSecret, namespace, "{.data.storageAccountName}")
      echo "SAN: ${env.TEST_STORAGE_ACCOUNT_NAME}"
      env.TEST_STORAGE_ACCOUNT_KEY = kubectl.getSecret(storageSecret, namespace, "{.data.accessKey}")
      echo "SAK: ${env.TEST_STORAGE_ACCOUNT_KEY}"
      //env.TEST_STORAGE_ACCOUNT_NAME = echo sh(returnStdout: true, script: "kubectl get secret  -n ${aksServiceName} ${storageSecret} -o=jsonpath='{.data.storageAccountName}'")
      //env.TEST_STORAGE_ACCOUNT_KEY = echo sh(returnStdout: true, script: "kubectl get secret  -n ${aksServiceName} ${storageSecret} -o=jsonpath='{.data.accessKey}'")

      def serviceBusConnectionStr = kubectl.getSecret(serviceBusSecret, namespace, "{.data.connectionString}")
      echo "SBC: ${serviceBusConnectionStr}"
      //Regex: Endpoint=sb:\/\/([-a-zA-Z0-9]+)\.servicebus\.windows\.net.*
      def serviceBusNamespace = serviceBusConnectionStr.substring(14).split("\\.")[0]
      echo "SBNS: ${serviceBusNamespace}"

      // create queue
      def queues = az "servicebus queue list --resource-group ${env.RESOURCE_GROUP} --namespace-name ${serviceBusNamespace} --query '[].name'"
      if (!queues.contains(queueName)) {
        az "servicebus queue create --resource-group ${env.RESOURCE_GROUP} --namespace-name ${serviceBusNamespace} --name ${queueName}"
      }
      // create shared access keys
      def queueRules = az "servicebus queue authorization-rule list --resource-group ${env.RESOURCE_GROUP} --namespace-name ${serviceBusNamespace} --queue-name ${queueName} --query '[].name'"
      if (!queueRules.contains("SendSharedAccessKey")) {
        az "servicebus queue authorization-rule create --resource-group ${env.RESOURCE_GROUP} --namespace-name ${serviceBusNamespace} --queue-name ${queueName} --name SendSharedAccessKey --rights Send"
      }
      if (!queueRules.contains("ListenSharedAccessKey")) {
        az "servicebus queue authorization-rule create --resource-group ${env.RESOURCE_GROUP} --namespace-name ${serviceBusNamespace} --queue-name ${queueName} --name ListenSharedAccessKey --rights Listen"
      }

      // get connection string for send access key
      env.QUEUE_ENVELOPE_SEND = az "servicebus queue authorization-rule keys list --resource-group ${env.RESOURCE_GROUP} --namespace-name ${serviceBusNamespace} --queue-name ${queueName} --name SendSharedAccessKey --query primaryConnectionString"
      echo "QES: ${env.QUEUE_ENVELOPE_SEND}"

      echo sh(returnStdout: true, script: 'env')
    }
  }
  
  after('test') {
    builder.gradle('integration')
  }
  enableDbMigration()
  enableSlackNotifications(channel)
  enableApiGatewayTest()
  enableDockerBuild()
  enableDeployToAKS()

  onPR() {
    loadVaultSecrets(commonSecrets)
  }

  onNonPR() {
    loadVaultSecrets(commonSecrets + apiTestSecrets)
  }

  setVaultName('bulk-scan')
}
