#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.TeamNames

def type = "java"
def product = "bulk-scan"
def component = "processor"

def channel = '#bsp-build-notices'

List<LinkedHashMap<String, Object>> apiTestSecrets = [
  // Base64-encoded PKCS 12 key store, containing client's private key and certificate known to the API
  secret('test-valid-key-store', 'TEST_VALID_KEY_STORE'),
  secret('test-valid-key-store-password', 'TEST_VALID_KEY_STORE_PASSWORD'),

  // Base64-encoded PKCS 12 key store containing private key and certificate known to the API, but expired
  secret('test-expired-key-store', 'TEST_EXPIRED_KEY_STORE'),
  secret('test-expired-key-store-password', 'TEST_EXPIRED_KEY_STORE_PASSWORD'),

  // Base64-encoded PKCS12 key store containing private key and certificate known to the API, but not yet valid
  secret('test-not-yet-valid-key-store', 'TEST_NOT_YET_VALID_KEY_STORE'),
  secret('test-not-yet-valid-key-store-password', 'TEST_NOT_YET_VALID_KEY_STORE_PASSWORD'),

  secret('test-subscription-key', 'TEST_SUBSCRIPTION_KEY'),

  secret('test-storage-account-key', 'TEST_STORAGE_ACCOUNT_KEY')
]


List<LinkedHashMap<String, Object>> commonSecrets = [
  secret('test-s2s-secret', 'TEST_S2S_SECRET'),
  secret('s2s-secret', 'S2S_SECRET'),
  secret('test-private-key-der', 'TEST_PRIVATE_KEY_DER'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  before('smoketest:aks') {
    withAksClient('nonprod') {

      // Vars needed for AKS testing
      env.TEST_S2S_NAME = 'bulk_scan_processor_tests'
      env.TEST_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
      env.TEST_SCAN_DELAY = '4000'
      env.RESOURCE_GROUP = 'bulk-scan-aks'
      env.TEST_STORAGE_CONTAINER_NAME = 'bulkscan'

      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def storageSecret = "storage-secret-${aksServiceName}"
      def serviceBusSecret = "servicebus-secret-namespace-${aksServiceName}"

      def namespace = new TeamNames().getNameNormalizedOrThrow(product)
      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get storage account details from kubernetes
      env.TEST_STORAGE_ACCOUNT_NAME = kubectl.getSecret(storageSecret, namespace, "{.data.storageAccountName}")
      env.TEST_STORAGE_ACCOUNT_URL = "https://${env.TEST_STORAGE_ACCOUNT_NAME}.blob.core.windows.net"
      env.TEST_STORAGE_ACCOUNT_KEY = kubectl.getSecret(storageSecret, namespace, "{.data.accessKey}")

      // Get envelopes queue connection string
      def sbConnectionStr = kubectl.getSecret(serviceBusSecret, namespace, "{.data.connectionString}")
      env.PROCESSED_ENVELOPES_QUEUE_WRITE_CONN_STRING = "${sbConnectionStr};EntityPath=processed-envelopes"

    }
  }

  after('test') {
    builder.gradle('integration')
  }
  enableDbMigration()
  enableSlackNotifications(channel)
  enableApiGatewayTest()
  enableDockerBuild()
  installCharts()

  onPR() {
    loadVaultSecrets(commonSecrets)
  }

  onNonPR() {
    loadVaultSecrets(commonSecrets + apiTestSecrets)
  }

  setVaultName('bulk-scan')
}
